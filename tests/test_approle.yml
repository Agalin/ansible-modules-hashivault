---
- hosts: localhost
  gather_facts: no
  vars:
    namespace: 'application'
    rules: >
        path "secret/{{namespace}}/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
        path "secret/{{namespace}}" {
          capabilities = ["list"]
        }
  tasks:
    - name: Set approle policy
      hashivault_policy_set:
        name: "approle_test_policy_original"
        rules: "{{rules}}"
      register: 'vault_policy_set'
    - assert: { that: "{{vault_policy_set.rc}} == 0" }

    - name: Set another approle policy
      hashivault_policy_set:
        name: "approle_test_policy"
        rules: "{{rules}}"
      register: 'vault_policy_set'
    - assert: { that: "{{vault_policy_set.rc}} == 0" }

    - name: enable approle authentication
      hashivault_auth_enable:
        name: approle

    - name: delete role
      hashivault_approle_role:
        name: testrole
        state: absent
      failed_when: false

    - name: create role
      hashivault_approle_role:
        name: testrole
        policies:
          - approle_test_policy_original
        state: present
      register: 'vault_role_create'
    - assert: { that: "{{vault_role_create.changed}} == True" }
    - assert: { that: "{{vault_role_create.rc}} == 0" }

    - name: update role
      hashivault_approle_role:
        name: testrole
        policies:
          - approle_test_policy
        state: present
      register: 'vault_role_update'
    - assert: { that: "{{vault_role_update.changed}} == True" }
    - assert: { that: "{{vault_role_update.rc}} == 0" }

    - name: update role idempotent
      hashivault_approle_role:
        name: testrole
        policies:
          - approle_test_policy
        state: present
      register: 'vault_role_update'
    - assert: { that: "{{vault_role_update.changed}} == False" }
    - assert: { that: "{{vault_role_update.rc}} == 0" }

    - name: list roles
      hashivault_approle_role_list:
      register: 'vault_role_list'
    - assert: { that: "{{vault_role_list.changed}} == False" }
    - assert: { that: "{{vault_role_list.rc}} == 0" }
    - fail: msg="role testrole not in list {{vault_role_list.roles}}"
      when: '"testrole" not in vault_role_list.roles'

    - name: get role
      hashivault_approle_role_get:
        name: testrole
      register: 'vault_role'
    - assert: { that: "{{vault_role.changed}} == False" }
    - assert: { that: "{{vault_role.rc}} == 0" }

    - name: get role id
      hashivault_approle_role_id:
        name: testrole
      register: 'vault_role_id'
    - assert: { that: "{{vault_role_id.changed}} == False" }
    - assert: { that: "{{vault_role_id.rc}} == 0" }
    - assert:
        that:
          - vault_role_id.id|default('') != ''
    - set_fact:
        approle_role_id: "{{vault_role_id.id}}" # For template
    - set_fact:
        approle_login_mount_point: "approle" # For template

    - name: create role secret id
      hashivault_approle_role_secret:
        name: testrole
        state: present
      register: 'vault_role_secret_create'
    - assert: { that: "{{vault_role_secret_create.changed}} == True" }
    - assert: { that: "{{vault_role_secret_create.rc}} == 0" }
    - assert:
        that:
          - vault_role_secret_create.data.secret_id_accessor|default('') != ''
          - vault_role_secret_create.data.secret_id|default('') != ''
    - set_fact:
        approle_secret_id: "{{vault_role_secret_create.data.secret_id}}"
    - set_fact:
        approle_secret_id_accessor: "{{vault_role_secret_create.data.secret_id_accessor}}"

    - template:
        src: "{{playbook_dir}}/templates/approlenv.sh.j2"
        dest: "{{playbook_dir}}/approlenv.sh"
        mode: 0700

    - name: list secrets
      hashivault_approle_role_secret_list:
        name: testrole
      register: 'vault_role_secret_list'
    - assert: { that: "{{vault_role_secret_list.changed}} == False" }
    - assert: { that: "{{vault_role_secret_list.rc}} == 0" }
    - fail: msg="secret {{approle_secret_id_accessor}} not in list"
      when: approle_secret_id_accessor not in vault_role_secret_list.secrets

    - name: get secret
      hashivault_approle_role_secret_get:
        name: testrole
        secret: "{{approle_secret_id}}"
      register: 'vault_role_secret_get'
    - assert: { that: "{{vault_role_secret_get.changed}} == False" }
    - assert: { that: "{{vault_role_secret_get.rc}} == 0" }
    - assert: { that: "'{{vault_role_secret_get.secret.secret_id_accessor}}' == '{{approle_secret_id_accessor}}'" }

    - name: get non existing secret
      hashivault_approle_role_secret_get:
        name: testrole
        secret: "1-2-3-4"
      register: 'vault_role_secret_get_not_existing'
    - assert: { that: "'{{vault_role_secret_get_not_existing.status}}' == 'absent'" }
    - assert: { that: "{{vault_role_secret_get_not_existing.rc}} == 0" }

    - name: get secret accessor
      hashivault_approle_role_secret_accessor_get:
        name: testrole
        accessor: "{{approle_secret_id_accessor}}"
      register: 'vault_role_secret_accessor_get'
    - assert: { that: "{{vault_role_secret_accessor_get.changed}} == False" }
    - assert: { that: "{{vault_role_secret_accessor_get.rc}} == 0" }
    - assert: { that: "'{{vault_role_secret_accessor_get.secret.secret_id_accessor}}' != ''" }

    - name: create secret to delete
      hashivault_approle_role_secret:
        name: testrole
        state: present
      register: 'vault_role_secret_create'
    - set_fact:
        approle_secret_id: "{{vault_role_secret_create.data.secret_id}}"
    - set_fact:
        approle_secret_id_accessor: "{{vault_role_secret_create.data.secret_id_accessor}}"

    - name: delete secret
      hashivault_approle_role_secret:
        name: testrole
        secret: "{{approle_secret_id}}"
        state: absent
      register: 'vault_role_secret_delete'
    - assert: { that: "{{vault_role_secret_delete.changed}} == True" }
    - assert: { that: "{{vault_role_secret_delete.rc}} == 0" }

    - name: make sure secret is gone
      hashivault_approle_role_secret_list:
        name: testrole
      register: 'vault_role_secret_list'
    - assert: { that: "{{vault_role_secret_list.changed}} == False" }
    - assert: { that: "{{vault_role_secret_list.rc}} == 0" }
    - fail: msg="secret {{approle_secret_id_accessor}} shoud not be in list"
      when: approle_secret_id_accessor in vault_role_secret_list.secrets

    - name: create secret wrap_ttl
      hashivault_approle_role_secret:
        name: testrole
        state: present
        wrap_ttl: 30s
      register: 'vault_role_secret_create'
    - set_fact:
        approle_secret_id: "{{vault_role_secret_create.wrap_info.token}}"
    - set_fact:
        approle_secret_id_accessor: "{{vault_role_secret_create.wrap_info.accessor}}"
