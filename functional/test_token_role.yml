---
- hosts: localhost
  gather_facts: no
  vars:
    namespace: 'application'
    rules: >
        path "token/{{namespace}}/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
        path "token/{{namespace}}" {
          capabilities = ["list"]
        }
  tasks:
    - name: Set token role policy
      hashivault_policy:
        name: "tokenrole_test_policy_original"
        rules: "{{rules}}"
      register: vault_policy
    - assert: { that: "{{vault_policy.rc}} == 0" }

    - name: Set another token role policy
      hashivault_policy:
        name: "tokenrole_test_policy"
        rules: "{{rules}}"
      register: vault_policy
    - assert: { that: "{{vault_policy.rc}} == 0" }

    - name: delete role
      hashivault_token_role:
        name: testrole
        state: absent
      failed_when: false

    - name: create role
      hashivault_token_role:
        name: testrole
        config:
          allowed_policies:
            - tokenrole_test_policy_original
        state: present
      register: 'vault_role_create'
    - assert: { that: "{{vault_role_create.changed}} == True" }
    - assert: { that: "{{vault_role_create.rc}} == 0" }

    - name: update role
      hashivault_token_role:
        name: testrole
        config:
          allowed_policies:
            - tokenrole_test_policy
        state: present
      register: 'vault_role_update'
    - assert: { that: "{{vault_role_update.changed}} == True" }
    - assert: { that: "{{vault_role_update.rc}} == 0" }

    - name: update role idempotent
      hashivault_token_role:
        name: testrole
        config:
          allowed_policies:
            - tokenrole_test_policy
        state: present
      register: 'vault_role_update'
    - assert: { that: "{{vault_role_update.changed}} == False" }
    - assert: { that: "{{vault_role_update.rc}} == 0" }

